#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# Friday Aug 23 10:37:47 2013
#
#########################################################
# Name: videomass2.py
# Porpose: bootstrap for main launch script of videomass2
# Writer: Gianluca Pernigoto <jeanlucperni@gmail.com>
# Copyright: (c) 2013-2018/2019 Gianluca Pernigoto <jeanlucperni@gmail.com>
# license: GPL3

# This file is part of Videomass2.

#    Videomass2 is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Videomass2 is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with Videomass2.  If not, see <http://www.gnu.org/licenses/>.

# Rev 04/08/2014, 01/18/2015, August 18 2018
#########################################################
import wx
import os
from vdms_SYS.ctrl_run import system_check, parsing_fileconf
from vdms_SYS.appearance import Appearance

path_confdir = os.path.expanduser('~/.videomass2/')# presets path
PWD = os.getcwd()

class Videomass(wx.App):
    """
    Before starting the application, a check is performed to evaluate if 
    the current state is suitable. If everything works, the program 
    initialization passes the necessary values to the main frame.
    TODO:Make a logging with python standard library logging
    """
    def __init__(self, redirect=True, filename=None):
        """
        Creating attributes that will be used after in other class
        with GetApp()
        """
        print "App __init__"
        #self.setui = system_check() # for user-space settings
        #self.fileconf = parsing_fileconf() # for user interface settings
        wx.App.__init__(self, redirect, filename) # Call the base class constructor
        
    def OnInit(self):
        """
        This is a bootstrap interface. The 'setui' calls the function that 
        prepares the environment configuration. The 'fileconf' take all 
        values of the file configuration.
        """
        setui = system_check() # for user-space settings
        fileconf = parsing_fileconf() # for user interface settings
        
        if setui[2]: # if source dir is corrupt
            wx.MessageBox('Can not find the configuration file\n\n'
                          'Sorry, cannot continue..',
                          'Fatal Error - Videomass2', wx.ICON_STOP)
            print 'Videomass2: Fatal Error, file configuration not found'
            return False

        # check if videomass2.conf is corrupt or unreadable
        if float(fileconf[0]) < 1.1:
            msg = ('Videomass2: Outdated configuration file.\n'
                    'Current version do not match with %s .\n\n' 
                    % fileconf[0])
            print msg
            if wx.MessageBox('%s\nDo you want to restore the new one? ' 
                             % (msg), 
                             'Please Confirm - Videomass2',
                              wx.ICON_QUESTION | 
                              wx.YES_NO, 
                              None) == wx.YES:
                os.remove("%s/videomass2.conf" % path_confdir)
            return False
            
        elif fileconf == 'corrupted':
            msg = ('Videomass2: corrupt configuration file\n\n')
            print msg
            if wx.MessageBox('%s\nDo you want to restore the new one? ' 
                             % (msg), 
                             'Please Confirm - Videomass2',
                             wx.ICON_QUESTION | 
                             wx.YES_NO, 
                             None) == wx.YES:
                os.remove("%s/videomass2.conf" % path_confdir)
            return False
        
        icons = Appearance(setui[3], fileconf[14])# set appearance instance
        pathicons = icons.icons_set() # get paths icons

        if setui[0] == 'Darwin':
            os.environ["PATH"] += "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
            for link in [fileconf[8],fileconf[10],fileconf[12]]:
                if os.path.isfile("%s" % link):
                    binaries = False
                else:
                    binaries = True
                    break
            if binaries:
                self.reprise(pathicons[0])
                return True
            else:
                ffmpeg_link = fileconf[8]
                ffprobe_link = fileconf[10]
                ffplay_link = fileconf[12]

        elif setui[0] == 'Windows':
            for link in [fileconf[8],fileconf[10],fileconf[12]]:
                if os.path.isfile("%s" % link):
                    binaries = False
                else:
                    binaries = True
                    break
            if binaries:
                self.reprise(pathicons[0])
                return True
            else:
                ffmpeg_link = fileconf[8]
                ffprobe_link = fileconf[10]
                ffplay_link = fileconf[12]
                
        else: # is Linux 
            ffmpeg_link = fileconf[8]
            ffprobe_link = fileconf[10]
            ffplay_link = fileconf[12]
            #self.reprise(pathicons[0])
            #return True
            
        from vdms_MAIN.main_frame import MainFrame
        main_frame = MainFrame(setui, fileconf, path_confdir, PWD, 
                               ffmpeg_link, ffprobe_link, ffplay_link,
                               pathicons
                               )
        main_frame.Show()
        self.SetTopWindow(main_frame)
        return True
            
    def reprise(self, icon):
        """
        Start a temporary dialog: this is showing during first time 
        start the Videomass2 application on MaOS and Windows.
        """
        from vdms_DIALOGS.first_time_start import FirstStart
        main_frame = FirstStart(icon)
        main_frame.Show()
        self.SetTopWindow(main_frame)
        return True

    def OnExit(self):
        """
        """
        print "OnExit"
    
if __name__ == "__main__":
    app = Videomass(False)
    #app.MainLoop()
    fred = app.MainLoop()
    print "after MainLoop", fred
